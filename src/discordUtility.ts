import {
  GuildBasedChannel,
  Collection,
  GuildMember,
  GuildVoiceChannelResolvable,
  ActivityType,
  OAuth2Scopes,
  PermissionFlagsBits,
  Guild,
  ChannelType,
  VoiceChannel,
} from "discord.js";

import { config, d_client, getBotMember } from ".";

/**
 * Retrieves a channel by its name.
 *
 * @param {string} channelName - the name of the channel to retrieve
 * @return {void} the channel with the specified name
 */
export async function getChannelByName(
  channelName: string
): Promise<GuildBasedChannel> {
  const guild = await getGuild();
  const channels = (await guild.channels.fetch()) as Collection<
    string,
    GuildBasedChannel
  >;
  const channel = channels.find(
    (c) => c.name.toLowerCase() === channelName.toLowerCase()
  );
  if (!channel) throw new Error(`Channel "${channelName}" not found.`);
  return channel;
}
/**
 * Retrieves the your guild member object.
 *
 * @return {GuildMember} The guild member object of the current user.
 */

export async function getSelf(): Promise<GuildMember> {
  const guild = await getGuild();
  const member = guild.members.fetch(config.you.id);
  if (!member) {
    throw new Error(`Your member ID ${config.you.id} was not found in guild.`);
  }
  return member;
}
/**
 * Moves the user to the specified channel by name.
 *
 * @param {string} channelName - the name of the channel to move to
 * @param {GuildMember} you - the user to move
 */

export async function moveToChannelByName(
  channelName: string,
  you: GuildMember
): Promise<void> {
  const channel = await getChannelByName(channelName);
  if (channel) {
    console.info("Moving to channel: " + channel.name);
    if (you.voice.channel) {
      you.voice.setChannel(channel as GuildVoiceChannelResolvable);
    } else {
      console.warn("You are not in a voice channel.");
    }
  } else {
    console.error("Unknown channel name: " + channelName);
  }
}
/**
 * Sets the activity of the bot to the specified value.
 *
 * @param {string} botActivity - the activity to set for the bot
 * @return {void}
 */

export function setBotActivity(botActivity: string): void {
  console.info("Setting bot activity: " + botActivity);
  if (!d_client.user) {
    throw new Error("User is null - bot client is not properly initialized.");
  }
  d_client.user.setPresence({
    activities: [
      {
        name: botActivity,
        type: ActivityType.Custom,
      },
    ],
    status: "online",
  });
}
/**
 * Prints the invite link generated by the d_client with specific permissions and scopes.
 */
export function printInviteLink(): void {
  const inviteLink = d_client.generateInvite({
    permissions: [
      PermissionFlagsBits.ViewChannel,
      PermissionFlagsBits.MuteMembers,
      PermissionFlagsBits.DeafenMembers,
      PermissionFlagsBits.MoveMembers,
      PermissionFlagsBits.ChangeNickname,
    ],
    scopes: [
      OAuth2Scopes.Bot,
      OAuth2Scopes.ApplicationsCommands,
      OAuth2Scopes.Guilds,
      OAuth2Scopes.GuildsMembersRead,
    ],
  });
  console.log(`Invite link: ${inviteLink}`);
}
/**
 * Retrieves the guild from the cache using the configured guild id.
 *
 * @return {Guild} The retrieved guild.
 */

export async function getGuild() {
  const guild = (await d_client.guilds.fetch(config.guild.id)) as Guild;
  if (!guild) throw new Error("Guild not found.");
  return guild;
}
/**
 * Sets the nickname of the bot.
 *
 * @param {string} botNick - the new nickname for the bot
 * @return {void}
 */

export async function setBotNickname(botNick: string): Promise<void> {
  const bot = await getBotMember();
  console.debug("Checking bot permissions to update nickname...");
  if (bot.permissions.has(PermissionFlagsBits.ChangeNickname)) {
    console.info("Setting bot nick: " + botNick);
    bot.setNickname(botNick);
  } else {
    console.error(
      "The bot does not have permission to change nicknames. Requires CHANGE_NICKNAME."
    );
  }
}/**
 * Retrieve the voice channels from the cache of the current guild.
 *
 * @return {Collection<VoiceChannel>} The voice channels in the guild cache.
 */
export async function getVoiceChannels() {
  const guild = await getGuild();
  // wait for the voice channels to be cached
  var channels = await guild.channels.fetch();
  return channels.filter(
    (c) => c?.type === ChannelType.GuildVoice
  ) as Collection<string, VoiceChannel>;
}
/**
 * Retrieve the names of the voice channels from the cache of the current guild.
 *
 * @return {string[]} The names of the voice channels in the guild cache.
 */
export async function getVoiceChannelNames(): Promise<string[]> {
  const channels = await getVoiceChannels();
  return channels.map((channel) => channel.name);
}

